import { useEffect, useState } from "react";
import AddTodo from "./AddTodo";
import TodoList from "./TodoList";
import { deletetodo, editTodo, getTodos, sendTodo } from "../utils/Request";
import Header from "./Header";
import AccountEditForm from "./AccountEditform";
import run from "../utils/Gemini-api";

export default function Dashboard({ currentuser, setuser }) {
  const [todos, setTodos] = useState([
    {
      _id: 1,
      text: "Learn React",
      completed: false,
      subtask: [],
      Date: Date.now,
    },
    {
      _id: 2,
      text: "Learn Tailwind CSS",
      completed: false,
      subtask: [],
      Date: Date.now,
    },
  ]);
  const [loading, setLoading] = useState(false);
  const [text, setText] = useState(""); // add todo text handler
  const [date, setDate] = useState("2024-07-26T00:00");
  const [selectedTodo, setSeclectedTodo] = useState(null);
  const [completed, setCompleted] = useState(0);
  const [toggletodoEdit, setToggleEdit] = useState(false);

  const [toggleaccountedit, settoggleAccountedit] = useState(false);

  //run("make a sandwich");

  //ensure to load all the todos and user data at the begining of the page render
  useEffect(() => {
    if (currentuser !== undefined) {
      setuser((prev) => JSON.parse(localStorage.getItem("user")));
    }

    getTodos()
      .then((value) => {
        setTodos((prev) => [...value]);
      })
      .catch((err) => console.log("error in fetching todos", err));

    return () => {
      // clean up for useffect
      setTodos((prev) => []);
    };
  }, []);

  useEffect(() => {
    setCompleted((prev) => calculateCompleted(todos));
  }, [todos]);

  //function to add todo and update state
  const addTodo = async (todo) => {
    await sendTodo(todo)
      .then((value) => {
        setTodos([...value]);
        setLoading((prev) => false); //setting loading false to release the skeloton from ui
        console.log("Todo added Response", value);
      })
      .catch((err) => console.log("error in adding todos", err));
  };

  //function to toggle complete button on main tasks
  const toggleTodo = async (id) => {
    let temp = todos.filter((todo) => todo._id.toString() === id);
    if (temp.length > 0) {
      editTodo({
        todo_id: temp[0]._id,
        text: temp[0].text,
        completed: !temp[0].completed,
        subtask: temp[0].subtask,
        date: temp[0].date,
      }).then((value) => {
        console.log("todos updated");
        setTodos((prev) => [...value]);
      });
    }
  };

  //function to toggle complete button on sub task generated by gemini api
  const toggleSubtask = async (todo_id, subtask_id) => {
    let temp = todos.filter((todo) => todo._id.toString() === todo_id);
    if (temp.length > 0) {
      editTodo({
        todo_id: temp[0]._id,
        text: temp[0].text,
        completed: temp[0].completed,
        subtask: temp[0].subtask.map((item) =>
          item._id.toString() === subtask_id
            ? { task: item.task, completed: !item.completed }
            : item
        ),
        date: temp[0].date,
      }).then((value) => {
        console.log("Subtasks  updated");
        setTodos((prev) => [...value]);
      });
    }
  };

  //function to delete button on todo
  const toggleDelete = async (id) => {
    try {
      deletetodo(id);
      setTodos((prev) => prev.filter((val) => val._id.toString() !== id));
    } catch (error) {}
  };

  //function to calculate completed todos
  const calculateCompleted = (todos) => {
    let completed_tasks = 0;

    todos.forEach((element) => {
      if (element.completed === true) completed_tasks++; // incrementing the values for main tasks
    });

    return completed_tasks;
  };

  // console.log(todos);
  return (
    <div className="flex flex-col items-center overflow-hidden">
      <Header
        edit={settoggleAccountedit}
        currentuser={currentuser}
        toggleaccountedit={toggleaccountedit}
        completed={completed}
      />
      {!toggleaccountedit && (
        <div className="  p-4   md:w-1/2 lg:w-1/2  ">
          <AddTodo
            addTodo={addTodo}
            text={text}
            setText={setText}
            selectedTodo={selectedTodo}
            setTodos={setTodos}
            setSeclectedTodo={setSeclectedTodo}
            date={date}
            setDate={setDate}
            loading={loading}
            setLoading={setLoading}
          />
          <TodoList
            todos={todos}
            toggleTodo={toggleTodo}
            toggleDelete={toggleDelete}
            toggleSubtask={toggleSubtask}
            selectedTodo={selectedTodo}
            setSeclectedTodo={setSeclectedTodo}
            setText={setText}
            setDate={setDate}
            loading={loading}
          />
        </div>
      )}
      {toggleaccountedit && (
        <AccountEditForm setEdit={settoggleAccountedit} setuser={setuser} />
      )}
    </div>
  );
}
